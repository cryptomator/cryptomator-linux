name: AppImage

on:
  [push]

jobs: 
  build-appdir:
    name: Build AppDir
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-java@v1
        with:
          java-version: 15
      - name: Download Buildkit (tagged)
        if: startsWith(github.ref, 'refs/tags/')
        run: curl -L https://github.com/cryptomator/cryptomator/releases/download/${GITHUB_REF##*/}/buildkit-linux.zip -o buildkit.zip
      - name: Download Buildkit (latest)
        if: startsWith(github.ref, 'refs/heads/')
        run: curl -L https://github.com/cryptomator/cryptomator/releases/latest/download/buildkit-linux.zip -o buildkit.zip
      - name: Unzip Buildkit
        run: unzip buildkit.zip
      - name: Create Runtime Image
        run: >
          ${JAVA_HOME}/bin/jlink
          --verbose
          --output runtime
          --module-path "${JAVA_HOME/}/jmods"
          --add-modules java.base,java.logging,java.xml,java.sql,java.management,java.security.sasl,java.naming,java.datatransfer,java.security.jgss,java.rmi,java.scripting,java.prefs,java.desktop,jdk.security.auth,jdk.unsupported,java.net.http,jdk.crypto.ec,jdk.accessibility
          --no-header-files
          --no-man-pages
          --strip-debug
          --compress=1
      - name: Workaround for issue 27
        run: |
          JFFI_NATIVE_JAR=`ls libs/ | grep -e 'jffi-[1-9]\.[0-9]\{1,2\}.[0-9]\{1,2\}-native.jar'`
          ${JAVA_HOME}/bin/jar -xf libs/${JFFI_NATIVE_JAR} /jni/x86_64-Linux/
          mv jni/x86_64-Linux/* libs/libjffi.so
      - name: Archive appdir.tar.gz
        run: tar -czf appdir.tar.gz runtime LICENSE.txt libs
      - name: Upload appdir.tar.gz
        uses: actions/upload-artifact@v1
        with:
          name: appdir.tar.gz
          path: appdir.tar.gz
  
  build-appimage:
    name: Build AppImage
    runs-on: ubuntu-latest
    needs: build-appdir
    outputs:
      appimage-version: ${{ steps.setversion.outputs.version }}
    steps:
      - name: Set version
        id: setversion
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "BUILD_VERSION=${GITHUB_REF##*/}" >> $GITHUB_ENV
            echo "::set-output name=version::${GITHUB_REF##*/}"
          else
            echo "BUILD_VERSION=SNAPSHOT" >> $GITHUB_ENV
            echo "::set-output name=version::SNAPSHOT"
          fi
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Download appdir.tar.gz
        uses: actions/download-artifact@v1
        with:
          name: appdir.tar.gz
          path: .
      - name: Prepare GPG-Agent for signing with key 615D449FE6E6A235
        run: |
          echo "${GPG_PRIVATE_KEY}" | gpg --batch --quiet --import
          echo "${GPG_PASSPHRASE}" | gpg --batch --quiet --passphrase-fd 0 --pinentry-mode loopback --dry-run --sign appdir.tar.gz
        env:
          GPG_PRIVATE_KEY: ${{ secrets.RELEASES_GPG_PRIVATE_KEYÂ }}
          GPG_PASSPHRASE: ${{ secrets.RELEASES_GPG_PASSPHRASE }}
      - name: Unarchive appdir.tar.gz
        run: mkdir Cryptomator.AppDir && tar -xzvf appdir.tar.gz -C Cryptomator.AppDir
      - name: Patch Cryptomator.AppDir
        run: |
          cp -r resources/appimage/AppDir/* Cryptomator.AppDir/
          export REVISION_NO=`git rev-list --count HEAD`
          envsubst '${REVISION_NO}' < resources/appimage/AppDir/bin/cryptomator.sh > Cryptomator.AppDir/bin/cryptomator.sh
          ln -s usr/share/icons/hicolor/scalable/apps/org.cryptomator.Cryptomator.svg Cryptomator.AppDir/org.cryptomator.Cryptomator.svg
          ln -s usr/share/icons/hicolor/scalable/apps/org.cryptomator.Cryptomator.svg Cryptomator.AppDir/Cryptomator.svg
          ln -s usr/share/icons/hicolor/scalable/apps/org.cryptomator.Cryptomator.svg Cryptomator.AppDir/.DirIcon
          ln -s usr/share/applications/org.cryptomator.Cryptomator.desktop Cryptomator.AppDir/Cryptomator.desktop
          ln -s bin/cryptomator.sh Cryptomator.AppDir/AppRun
      - name: Download AppImageKit
        run: |
          curl -L https://github.com/AppImage/AppImageKit/releases/download/12/appimagetool-x86_64.AppImage -o ./tools/appimagekit/appimagetool.AppImage
          chmod +x ./tools/appimagekit/appimagetool.AppImage
          (cd ./tools/appimagekit && ./appimagetool.AppImage --appimage-extract)
      - name: Build AppImage
        run: >
          ./tools/appimagekit/squashfs-root/AppRun Cryptomator.AppDir cryptomator-${BUILD_VERSION}-x86_64.AppImage
          -u 'gh-releases-zsync|cryptomator|cryptomator|latest|cryptomator-*-x86_64.AppImage.zsync'
          --sign --sign-key=615D449FE6E6A235 --sign-args="--batch --pinentry-mode loopback"
      - name: Upload AppImage
        uses: actions/upload-artifact@v1
        with:
          name: cryptomator-${{ env.BUILD_VERSION }}-x86_64.AppImage
          path: cryptomator-${{ env.BUILD_VERSION }}-x86_64.AppImage
      - name: Upload AppImage.zsync
        uses: actions/upload-artifact@v1
        with:
          name: cryptomator-${{ env.BUILD_VERSION }}-x86_64.AppImage.zsync
          path: cryptomator-${{ env.BUILD_VERSION }}-x86_64.AppImage.zsync
          
  publish-github:
    name: Publish on Github 
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') # only when tagged
    needs: build-appimage
    steps:
      - name: Get version
        id: getversion
        run: echo "APPIMG_VERSION=${{ needs.build-appimage.outputs.appimage-version }}" >> $GITHUB_ENV
      - name: Download AppImage
        uses: actions/download-artifact@v1
        with:
          name: cryptomator-${{ env.APPIMG_VERSION }}-x86_64.AppImage
          path: .
      - name: Download AppImage.zsync
        uses: actions/download-artifact@v1
        with:
          name: cryptomator-${{ env.APPIMG_VERSION }}-x86_64.AppImage.zsync
          path: .
      - name: Create release on Github
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.CRYPTOBOT_RELEASE_TOKEN }} # release as "cryptobot"
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: |
            :construction: Work in Progress
          draft: true
          prerelease: false
      - name: Upload appimage to GitHub releases
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: cryptomator-${{ env.APPIMG_VERSION }}-x86_64.AppImage
          asset_name: cryptomator-${{ env.APPIMG_VERSION }}-x86_64.AppImage
          asset_content_type: application/vnd.appimage
      - name: Upload zsync file to GitHub releases
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: cryptomator-${{ env.APPIMG_VERSION }}-x86_64.AppImage.zsync
          asset_name: cryptomator-${{ env.APPIMG_VERSION }}-x86_64.AppImage.zsync
          asset_content_type: application/x-zsync
