name: AppImage

on:
  [push]

jobs: 
  build-appdir:
    name: Build AppDir
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-java@v1
        with:
          java-version: 14
      - name: Download Buildkit (tagged)
        if: startsWith(github.ref, 'refs/tags/')
        run: curl -L https://github.com/cryptomator/cryptomator/releases/download/${GITHUB_REF##*/}/buildkit-linux.zip -o buildkit.zip
      - name: Download Buildkit (latest)
        if: startsWith(github.ref, 'refs/heads/')
        run: curl -L https://github.com/cryptomator/cryptomator/releases/latest/download/buildkit-linux.zip -o buildkit.zip
      - name: Unzip Buildkit
        run: unzip buildkit.zip
      - name: Create Runtime Image
        run: >
          ${JAVA_HOME}/bin/jlink
          --verbose
          --output runtimeImage
          --module-path "${JAVA_HOME/}/jmods"
          --add-modules java.base,java.logging,java.xml,java.sql,java.management,java.security.sasl,java.naming,java.datatransfer,java.security.jgss,java.rmi,java.scripting,java.prefs,java.desktop,jdk.security.auth,jdk.unsupported,java.net.http,jdk.crypto.ec
          --no-header-files
          --no-man-pages
          --strip-debug
          --compress=1
      - name: Workaround for issue 27
        run: |
          JFFI_NATIVE_JAR=`ls libs/ | grep -e 'jffi-[1-9]\.[0-9]\{1,2\}.[0-9]\{1,2\}-native.jar'`
          ${JAVA_HOME}/bin/jar -xf libs/${JFFI_NATIVE_JAR} /jni/x86_64-Linux/
          mv jni/x86_64-Linux/* libs/libjffi.so
      - name: Archive appdir.tar.gz
        run: tar -czf appdir.tar.gz runtimeImage LICENSE.txt libs
      - name: Upload appdir.tar.gz
        uses: actions/upload-artifact@v1
        with:
          name: appdir.tar.gz
          path: appdir.tar.gz
  
  build-appimage:
    name: Build AppImage
    runs-on: ubuntu-latest
    needs: build-appdir
    steps:
      - name: Set version
        id: setversion
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "BUILD_VERSION=${GITHUB_REF##*/}" >> $GITHUB_ENV
          else
            echo "BUILD_VERSION=SNAPSHOT" >> $GITHUB_ENV
          fi
      - uses: actions/checkout@v2
      - name: Download appdir.tar.gz
        uses: actions/download-artifact@v1
        with:
          name: appdir.tar.gz
          path: .
      - name: Unarchive appdir.tar.gz
        run: mkdir Cryptomator.AppDir && tar -xzvf appdir.tar.gz -C Cryptomator.AppDir
      - name: Patch Cryptomator.AppDir
        run: |
          cp -r resources/appimage/AppDir/* Cryptomator.AppDir/
          export REVISION_NO=`git rev-list --count HEAD`
          envsubst '${REVISION_NO}' < resources/appimage/AppDir/bin/cryptomator.sh > Cryptomator.AppDir/bin/cryptomator.sh
          ln -s usr/share/icons/hicolor/scalable/apps/org.cryptomator.Cryptomator.svg Cryptomator.AppDir/org.cryptomator.Cryptomator.svg
          ln -s usr/share/icons/hicolor/scalable/apps/org.cryptomator.Cryptomator.svg Cryptomator.AppDir/Cryptomator.svg
          ln -s usr/share/icons/hicolor/scalable/apps/org.cryptomator.Cryptomator.svg Cryptomator.AppDir/.DirIcon
          ln -s usr/share/applications/org.cryptomator.Cryptomator.desktop Cryptomator.AppDir/Cryptomator.desktop
          ln -s bin/cryptomator.sh Cryptomator.AppDir/AppRun
      - name: Download AppImageKit
        run: |
          curl -L https://github.com/AppImage/AppImageKit/releases/download/12/appimagetool-x86_64.AppImage -o ./tools/appimagekit/appimagetool.AppImage
          chmod +x ./tools/appimagekit/appimagetool.AppImage
          (cd ./tools/appimagekit && ./appimagetool.AppImage --appimage-extract)
      - name: Build AppImage
        run: >
          ./tools/appimagekit/squashfs-root/AppRun Cryptomator.AppDir cryptomator-${BUILD_VERSION}-x86_64.AppImage -u 'bintray-zsync|cryptomator|cryptomator|cryptomator-linux|cryptomator-${BUILD_VERSION}-x86_64.AppImage.zsync'
      - name: Upload AppImage
        uses: actions/upload-artifact@v1
        with:
          name: cryptomator-${{ env.BUILD_VERSION }}-x86_64.AppImage
          path: cryptomator-${{ env.BUILD_VERSION }}-x86_64.AppImage
      - name: Upload AppImage.zsync
        uses: actions/upload-artifact@v1
        with:
          name: cryptomator-${{ env.BUILD_VERSION }}-x86_64.AppImage.zsync
          path: cryptomator-${{ env.BUILD_VERSION }}-x86_64.AppImage.zsync
          
  publish-bintray:
    name: Publish on Bintray
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') # only when tagged
    needs: build-appimage
    steps:
      - name: Download cryptomator-SNAPSHOT-x86_64.AppImage
        uses: actions/download-artifact@v1
        with:
          name: cryptomator-SNAPSHOT-x86_64.AppImage
          path: .
      - name: Download cryptomator-SNAPSHOT-x86_64.AppImage.zsync
        uses: actions/download-artifact@v1
        with:
          name: cryptomator-SNAPSHOT-x86_64.AppImage.zsync
          path: .
      - name: Upload AppImage to Bintray
        env:
          BINTRAY_API_KEY: ${{ secrets.BINTRAY_API_KEY }}
        run: >
          curl -T cryptomator-SNAPSHOT-x86_64.AppImage
          -u cryptobot:${BINTRAY_API_KEY}
          -H "X-Bintray-Package:cryptomator-linux"
          -H "X-Bintray-Version:${GITHUB_REF##*/}"
          -H "X-Bintray-Override:1"
          -H "X-Bintray-Publish:1"
          https://api.bintray.com/content/cryptomator/cryptomator/${GITHUB_REF##*/}/cryptomator-${GITHUB_REF##*/}-x86_64.AppImage
      - name: Upload zsync file to Bintray
        env:
          BINTRAY_API_KEY: ${{ secrets.BINTRAY_API_KEY }}
        run: >
          curl -T cryptomator-SNAPSHOT-x86_64.AppImage.zsync
          -u cryptobot:${BINTRAY_API_KEY}
          -H "X-Bintray-Package:cryptomator-linux"
          -H "X-Bintray-Version:${GITHUB_REF##*/}"
          -H "X-Bintray-Override:1"
          -H "X-Bintray-Publish:1"
          https://api.bintray.com/content/cryptomator/cryptomator/${GITHUB_REF##*/}/cryptomator-${GITHUB_REF##*/}-x86_64.AppImage.zsync
